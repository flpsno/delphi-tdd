unit TestCalculadora;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Calculadora, System.SysUtils, System.Variants;

type
  // Test methods for class TCalculadora

  TestTCalculadora = class(TTestCase)
  strict private
    FCalculadora: TCalculadora;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSomar_Sucesso;
    procedure TestDividir_Sucesso;
    procedure TestDividir_Erro_DivisaoPorZero;

  end;

implementation

procedure TestTCalculadora.SetUp;
begin
  FCalculadora := TCalculadora.Create;
end;

procedure TestTCalculadora.TearDown;
begin
  FCalculadora.Free;
  FCalculadora := nil;
end;

procedure TestTCalculadora.TestDividir_Erro_DivisaoPorZero;
var
  ReturnValue: Double;
  pValorA, pValorB: Integer;
begin
  // Arrange
  pValorA := 10;
  pValorB := 0;

  try
    // Act
    ReturnValue := FCalculadora.Dividir(pValorA, pValorB);
  except

    // Assert
    on E: Exception do
      Check(E is EZeroDivide);
  end;
end;

procedure TestTCalculadora.TestDividir_Sucesso;
var
  ReturnValue, pExpectedValue: Double;
  pValorA, pValorB: Integer;
begin
  // Arrange
  pValorA := 10;
  pValorB := 4;
  pExpectedValue := 2.5;

  // Act
  ReturnValue := FCalculadora.Dividir(pValorA, pValorB);

  // Assert
  CheckEquals(pExpectedValue, ReturnValue);
end;

procedure TestTCalculadora.TestSomar_Sucesso;
var
  ReturnValue: Integer;
  pValorA, pValorB, pExpectedValue: Integer;
begin
  // Arrange
  pValorA := 10;
  pValorB := 20;
  pExpectedValue := 30;

  // Act
  ReturnValue := FCalculadora.Somar(pValorA, pValorB);

  // Assert
  CheckEquals(pExpectedValue, ReturnValue);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTCalculadora.Suite);
end.

